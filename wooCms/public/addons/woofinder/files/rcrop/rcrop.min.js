;
(function(d) {
    d.rcrop = {
        settings: {
            full: !1,
            minSize: [20, 20],
            maxSize: [null, null],
            preserveAspectRatio: !1,
            inputs: !0,
            inputsPrefix: "",
            grid: !1,
            preview: {
                display: !1,
                size: [50, 50],
                wrapper: ""
            }
        }
    };
    var m = ResponsiveCrop = function(e, k) {
        var a = this;
        this.el = e instanceof d ? e : d(e);
        this.image = {
            instance: null,
            width: 0,
            height: 0
        };
        this.wrapper = d("<div>", {
            "class": "rcrop-wrapper"
        });
        this.cropArea = d("<div>", {
            "class": "rcrop-croparea"
        });
        this.cropData = {
            width: 0,
            height: 0,
            x: 0,
            y: 0
        };
        this.outer = {
            wrapper: d("<div>", {
                "class": "rcrop-outer-wrapper"
            }),
            left: d("<div>", {
                "class": "rcrop-outer rcrop-outer-left"
            }),
            right: d("<div>", {
                "class": "rcrop-outer rcrop-outer-right"
            }),
            top: d("<div>", {
                "class": "rcrop-outer rcrop-outer-top"
            }),
            bottom: d("<div>", {
                "class": "rcrop-outer rcrop-outer-bottom"
            })
        };
        this.cropAspectRatio;
        this.preview = null;
        this.clayfy;
        this.settings = d.extend(!0, {}, d.rcrop.settings, k);
        var u = function() {
                a.wrapper.insertAfter(a.el);
                a.wrapper.append(a.el);
                a.wrapper.append(a.outer.wrapper);
                a.outer.wrapper.append(a.outer.left, a.outer.right, a.outer.top, a.outer.bottom);
                a.wrapper.append(a.cropArea);
                a.cropArea.append('<div class="rcrop-croparea-inner">');
                a.settings.grid && a.cropArea.append('<div class="rcrop-grid"><div class="rcrop-grid-line"></div><div class="rcrop-grid-line"></div></div>');
                m();
                if (a.settings.inputs) {
                    var b = 0 != a.settings.inputsPrefix ? a.settings.inputsPrefix + "-" : "";
                    d.each(["x", "y", "width", "height"], function(c, f) {
                        a.wrapper.append('<input type="hidden" name="' + b + f + '[]">')
                    })
                }
            },
            m = function() {
                var b = d('<div class="rcrop-handler-wrapper"></div>');
                d.each(["top-left",
                    "top-right", "bottom-left", "bottom-right"
                ], function(a, f) {
                    b.append('<div class="rcrop-handler-' + f + ' rcrop-handler-corner""></div>')
                });
                d.each(["top", "right", "bottom", "left"], function(a, f) {
                    b.append('<div class="rcrop-handler-' + f + ' rcrop-handler-border"></div>')
                });
                a.cropArea.append(b)
            },
            p = function() {
                a.cropData = n({
                    width: a.clayfy.newSize.width,
                    height: a.clayfy.newSize.height,
                    y: a.clayfy.newSize.top,
                    x: a.clayfy.newSize.left
                }, a.image.width / a.el.width());
                a.cropData.width = Math.max(a.cropData.width, a.settings.minSize[0]);
                a.cropData.height = Math.max(a.cropData.height, a.settings.minSize[1]);
                a.settings.maxSize[0] && (a.cropData.width = Math.min(a.cropData.width, a.settings.maxSize[0]));
                a.settings.maxSize[1] && (a.cropData.height = Math.min(a.cropData.height, a.settings.maxSize[1]));
                if (a.settings.preserveAspectRatio) {
                    var b = a.settings.minSize[0];
                    a.cropData.height * a.cropAspectRatio > (a.settings.maxSize[0] || a.image.width) || a.cropData.height * a.cropAspectRatio < b ? a.cropData.height = Math.round(a.cropData.width / a.cropAspectRatio) : a.cropData.width =
                        Math.round(a.cropData.height * a.cropAspectRatio)
                }
                a.cropData.y + a.cropData.height > a.image.height && (a.cropData.y = a.image.height - a.cropData.height);
                a.cropData.x + a.cropData.width > a.image.width && (a.cropData.x = a.image.width - a.cropData.width);
                a.settings.inputs && d.each(["x", "y", "width", "height"], function(b, f) {
                    a.wrapper.find('[name$="' + f + '[]"]').val(a.cropData[f])
                });
                a.settings.preview.display && l()
            },
            q = function() {
                var b = a.el[0].getBoundingClientRect(),
                    c = b.width,
                    b = b.height,
                    f = a.clayfy.newSize,
                    d = f.width,
                    e = f.height,
                    g = f.top,
                    f = f.left;
                a.cropArea.css({
                    width: d / c * 100 + "%",
                    height: e / b * 100 + "%",
                    top: g / b * 100 + "%",
                    left: f / c * 100 + "%"
                });
                a.outer.left.width(f / c * 100 + "%");
                a.outer.top.height(g / b * 100 + "%");
                a.outer.bottom.css({
                    top: (g + e) / b * 100 + "%"
                });
                a.outer.right.css({
                    left: (f + d) / c * 100 + "%"
                })
            },
            r = function() {
                var b = a.clayfy.newSize;
                a.outer.left.width(b.left);
                a.outer.top.height(b.top);
                a.outer.bottom.css({
                    top: b.top + b.outerHeight
                });
                a.outer.right.css({
                    left: b.left + b.outerWidth
                })
            },
            v = function() {
                var b = a.settings,
                    c = a.clayfy.settings;
                c.minSize = g(b.minSize);
                c.maxSize = g(b.maxSize);
                a.clayfy.draggable.setBounderies()
            },
            w = function() {
                var b = a.settings;
                a.cropArea.clayfy({
                    type: "resizable",
                    container: a.wrapper,
                    preserveAspectRatio: b.preserveAspectRatio,
                    minSize: g(b.minSize),
                    maxSize: g(b.maxSize)
                });
                a.clayfy = a.cropArea.clayfy("instance");
                a.clayfy.originalSize.width = a.settings.minSize[0];
                a.clayfy.originalSize.height = a.settings.minSize[1];
                a.resize(b.full ? a.image.width : Math.max(.8 * a.image.width, b.minSize[0]), b.full ? a.image.height : Math.max(.8 * a.image.height, b.minSize[1]),
                    "center", "center");
                a.cropArea.on("mousedown touchstart", v);
                a.cropArea.on("clayfy-resizeend clayfy-drop", p);
                a.cropArea.on("clayfy-resize clayfy-drag", r);
                a.settings.preview.display && (a.cropArea.on("clayfy-resize clayfy-drag", l), a.cropArea.on("clayfy-cancel", l));
                a.cropArea.on("clayfy-resizeend clayfy-drop", q);
                a.cropArea.on("clayfy-cancel", q);
                a.cropArea.on("clayfy-resizeend clayfy-drop", function() {
                    a.el.trigger("rcrop-changed", [a])
                });
                a.cropArea.on("clayfy-drag clayfy-resize", function() {
                    a.el.trigger("rcrop-change", [a])
                })
            },
            t = function() {
                var b = a.settings.preview.size,
                    c = [],
                    d = a.clayfy ? a.clayfy.newSize : {
                        width: a.cropArea.width(),
                        height: a.cropArea.height()
                    };
                "string" === typeof b[0] && -1 < b[0].indexOf("%") ? c[0] = Number(b[0].replace("%", "")) / 100 * d.width : c[0] = b[0];
                "string" === typeof b[1] && -1 < b[1].indexOf("%") ? c[1] = Number(b[1].replace("%", "")) / 100 * d.height : c[1] = b[1];
                return c
            },
            x = function() {
                var b = a.settings.preview.wrapper;
                b && (b = b instanceof d ? b : d(b));
                b && b.length || (b = d("<div>", {
                    "class": "rcrop-preview-wrapper"
                }), a.wrapper.after(b));
                var c = t();
                a.preview = d('<canvas width="' + c[0] + '" height="' + c[1] + '"></canvas>');
                a.preview.appendTo(b)
            },
            l = function(b) {
                var c = a.cropData;
                b && (c = n({
                    width: a.clayfy.newSize.width,
                    height: a.clayfy.newSize.height,
                    x: a.clayfy.newSize.left,
                    y: a.clayfy.newSize.top
                }, a.image.width / a.el.width()));
                b = t();
                a.preview.attr({
                    width: b[0],
                    height: b[1]
                });
                a.preview[0].getContext("2d").drawImage(a.image.instance, c.x, c.y, c.width, c.height, 0, 0, b[0], b[1])
            },
            n = function(a, c) {
                if ("object" === typeof a) {
                    var d = a instanceof Array ? [] : {},
                        e;
                    for (e in a) d[e] =
                        "number" != typeof a[e] ? null : Math.round(a[e] * c);
                    return d
                }
                return a * c
            },
            g = function(b) {
                return n(b, a.el.width() / a.image.width)
            };
        this.getValues = function() {
            p();
            return {
                width: a.cropData.width,
                height: a.cropData.height,
                y: a.cropData.y,
                x: a.cropData.x
            }
        };
        this.getRealSize = function(b) {
            var c = new Image;
            c.setAttribute("crossOrigin", "anonymous");
            c.onload = function() {
                a.image.width = this.width;
                a.image.height = this.height;
                "function" === typeof b && b();
                return {
                    width: a.image.width,
                    height: a.image.height
                }
            };
            c.onerror = function() {
                return {
                    width: null,
                    height: null
                }
            };
            c.src = a.el.attr("src");
            a.image.instance = c
        };
        this.getDataURL = function(b, c) {
            b = b || a.cropData.width;
            c = c || a.cropData.height;
            var f = d('<canvas width="' + b + '" height="' + c + '"></canvas>');
            f[0].getContext("2d").drawImage(a.image.instance, a.cropData.x, a.cropData.y, a.cropData.width, a.cropData.height, 0, 0, b, c);
            return f[0].toDataURL()
        };
        this.changeTest = function (v) {
            a.clayfy.preserveAspectRatio = v;
            if (v) {
                a.resize(a.image.width * 0.5 , a.image.width * 0.5 * a.settings.minSize[1] / a.settings.minSize[0])
            }
        };
        this.resize = function(b, c, d, e) {
            var h = a.settings;
            b = h.maxSize[0] ? Math.min(b, a.image.width, h.maxSize[0]) : Math.min(b, a.image.width);
            c = h.maxSize[1] ? Math.min(c, a.image.height,
                h.maxSize[1]) : Math.min(c, a.image.height);
            b = h.minSize[0] ? Math.max(b, h.minSize[0]) : b;
            c = h.minSize[1] ? Math.max(c, h.minSize[1]) : c;
            b = g(b);
            c = g(c);
            h.preserveAspectRatio && (b / c > a.cropAspectRatio ? b = c * a.cropAspectRatio : c = b / a.cropAspectRatio);
            e = "undefined" === typeof e ? a.cropArea.position().top : "center" === e ? (a.el.height() - c) / 2 : g(e);
            d = "undefined" === typeof d ? a.cropArea.position().left : "center" === d ? (a.el.width() - b) / 2 : g(d);
            d + b > a.el.width() && (d = a.el.width() - b);
            e + c > a.el.height() && (e = a.el.height() - c);
            a.cropArea.css({
                width: b,
                height: c,
                top: e,
                left: d
            });
            
            a.clayfy.newSize = a.clayfy.getNewSize();
            p();
            r();
            q();
            a.settings.preview.display && l()
        };
        this.destroy = function() {
            var b = a.el;
            a.wrapper.replaceWith(b);
            b.attr("style", "")
        };
        (function() {
            a.cropAspectRatio = a.settings.minSize[0] / a.settings.minSize[1];
            u();
            a.settings.preview.display && x();
            a.getRealSize(function() {
                w();
                a.el.trigger("rcrop-ready")
            })
        })()
    };
    d.fn.rcrop = function(e) {
        var k = arguments;
        if (void 0 === e || "object" === typeof e) return this.each(function() {
            d.data(this, "rcrop") || d.data(this, "rcrop",
                new m(this, e))
        });
        if ("string" === typeof e && "_" !== e[0] && "init" !== e) {
            if ("instance" === e) return this.length ? d.data(this[0], "rcrop") : null;
            if (-1 != d.inArray(e, d.fn.rcrop.getters)) {
                var a = d.data(this[0], "rcrop");
                return a[e].apply(a, Array.prototype.slice.call(k, 1))
            }
            return this.each(function() {
                var a = d.data(this, "rcrop");
                a instanceof m && "function" === typeof a[e] && a[e].apply(a, Array.prototype.slice.call(k, 1))
            })
        }
    };
    d.fn.rcrop.getters = ["getDataURL", "getValues", "getRealSize"]
})(jQuery);

(function() {
    function r(d, g) {
        this.el = d instanceof $ ? d : $(d);
        this.draggableBox;
        this.x;
        this.y;
        this.dX;
        this.dY;
        this.diffDX;
        this.diffDY;
        this.history = {
            dX: [0, 0, 0],
            dY: [0, 0, 0],
            diffDX: 0,
            diffDY: 0
        };
        this.actualPos;
        this.originalPos;
        this.initPos = {
            y: 0,
            x: 0,
            scrollTop: null,
            scrollLeft: null
        };
        this.bounderies = {};
        this.droppedTarget;
        this.scrollable = [];
        this.container = {};
        this.tempContainer = $("<div>", {
            style: "position: absolute; top:0; left:0"
        });
        this.droppable = {
            dragElement: [],
            dropArea: []
        };
        this.status = "ready";
        this.settings = $.extend(!0, {}, $.clayfy.settings, g);
        var a = this,
            b = !1,
            c = !0,
            k, n, h = $("<div>", {
                style: "height:100%;width:100%;position:fixed;top:0;left:0"
            });
        this.contentGhost;
        var f = function(l) {
                if ("canceling" !== a.status && a.settings.move) {
                    var c = a.getPosition(),
                        b = a.draggableBox.offset();
                    if (a.container.offset) {
                        var p = a.container.offset.innerBottom,
                            e = a.container.offset.innerRight;
                        b.top >= p - a.el.outerHeight() && (c.y += p - a.el.outerHeight() - b.top);
                        b.left >= e - a.el.outerWidth() && (c.x += e - a.el.outerWidth() - b.left)
                    }
                    a.el.css({
                        top: c.y,
                        left: c.x
                    });
                    "clayfy-dropinside" ===
                    l.type && (p = l.area.offset.innerBottom, e = l.area.offset.innerRight, b.top >= p - a.el.outerHeight() && (c.y += p - a.el.outerHeight() - b.top), b.left >= e - a.el.outerWidth() && (c.x += e - a.el.outerWidth() - b.left), a.el.css({
                        top: c.y,
                        left: c.x
                    }))
                }
                a.draggableBox.detach()
            },
            e = function() {
                var l = a.settings.container;
                l instanceof v ? a.container = l : a.settings.container && (a.container = new v(a.el, l))
            },
            m = function(l) {
                27 === l.keyCode && a.cancel(l)
            };
        this.cancel = function(l) {
            a.status = "canceling";
            a.draggableBox.animate({
                    top: a.initPos.y,
                    left: a.initPos.x
                },
                100,
                function() {
                    a.draggableBox.trigger("mouseup");
                    a.status = "ready"
                });
            null !== a.initPos.scrollTop && a.initPos.parent.animate({
                scrollTop: a.initPos.scrollTop
            }, 100);
            null !== a.initPos.scrollLeft && a.initPos.parent.animate({
                scrollLeft: a.initPos.scrollLeft
            }, 100)
        };
        a.scrollables = [];
        var C, t, w, D, u = function() {
                $(a.settings.scrollable).each(function() {
                    var l, c, b = $(this);
                    if (!b.length) return !0;
                    var p = !1;
                    c = !1;
                    l = $(window);
                    var e = $("body");
                    b.is("body") ? (e.height() > l.height() && (c = !0), e.width() > l.width() && (p = !0)) : (b[0].scrollHeight >
                        b.height() && (c = !0), b[0].scrollWidth > b.width() && (p = !0));
                    if (!p && !c) return !0;
                    p = b[0].getBoundingClientRect();
                    l = b instanceof $ ? b : $(b);
                    var f, k, d;
                    l.length ? (e = l[0].style.position, "static" === l.css("position") && l.css({
                            position: "relative"
                        }), k = $("<div>", {
                            style: "position:absolute;top:0;left:0;bottom:0;right:0"
                        }), f = $("<div>", {
                            style: "position:absolute;top:0;left:0;width:100%;height:100%"
                        }), k.append(f), l.append(k), d = f.width(), c = f.height(), parseInt(f.css("border-top-width")), parseInt(f.css("border-left-width")), k.remove(),
                        l[0].style.position = e, l = d) : c = l = void 0;
                    e = parseInt(b.css("border-top-width"));
                    f = parseInt(b.css("border-left-width"));
                    b = {
                        el: b,
                        top: p.top + e,
                        bottom: p.top + c + e,
                        left: p.left + f,
                        right: p.left + l + f,
                        innerHeight: c,
                        innerWidth: l,
                        interval: {
                            top: !1,
                            bottom: !1,
                            left: !1,
                            right: !1
                        },
                        isParent: a.settings.overflow ? !1 : a.el.offsetParent().is(b),
                        isBody: b.is("body")
                    };
                    b.isBody && (p = $(window), b.top = 0, b.left = 0, b.bottom = p.height(), b.right = p.width(), b.innerHeight = p.height(), b.innerWidth = p.width());
                    a.scrollables.push(b)
                })
            },
            r = function(l) {
                var b =
                    a.contentGhost ? a.contentGhost : a.draggableBox,
                    c = a.draggableBox[0].getBoundingClientRect(),
                    e = b.offset(),
                    f = c.top,
                    k = c.top + b.outerHeight(),
                    d = c.left,
                    c = c.left + b.outerWidth(),
                    g, n;
                g = (c - d) / 2 + d;
                n = (k - f) / 2 + f;
                0 < a.history.diffDY && C && (C = !1, a.y = Math.min(e.top + b.outerHeight(), l.pageY));
                0 > a.history.diffDY && t && (t = !1, a.y = Math.max(e.top, l.pageY));
                0 < a.history.diffDX && D && (D = !1, a.x = Math.min(e.left + b.outerWidth(), l.pageX));
                0 > a.history.diffDX && w && (w = !1, a.x = Math.max(e.left, l.pageX));
                b = 0;
                for (e = a.scrollables.length; b < e; b++) {
                    var h =
                        a.scrollables[b],
                        m = 0,
                        u = f - h.top,
                        r = h.bottom - k,
                        v = d - h.left,
                        z = h.right - c,
                        A = g < h.right && g > h.left,
                        B = n < h.bottom && n > h.top,
                        y = h;
                    y.el[0].scrollHeight - y.el.scrollTop() !== y.innerHeight && 6 > r && (-6 < r || h.isBody) && A ? (q(l, h, "bottom"), x(h, "top"), m++) : (x(h, "bottom"), h.el.scrollTop() && 6 > u && (-6 < u || h.isBody) && A ? (q(l, h, "top"), m++) : x(h, "top"));
                    h.el.scrollLeft() && 6 > v && (-6 < v || h.isBody) && B ? (q(l, h, "left"), x(h, "right"), m++) : (x(h, "left"), u = h, u.el[0].scrollWidth - u.el.scrollLeft() !== u.innerWidth && 6 > z && (-6 < z || h.isBody) && B ? (q(l, h, "right"),
                        m++) : x(h, "right"));
                    if (m) break
                }
            },
            q = function(l, b, c) {
                b.interval[c] && clearInterval(b.interval[c]);
                var e = function(a) {};
                switch (c) {
                    case "bottom":
                        e = function(c) {
                            c = c || 10;
                            b.el.scrollTop(b.el.scrollTop() + c);
                            b.isParent && (a.x = l.pageX, a.setBounderies(), a.updateDropArea(), C = !0)
                        };
                        break;
                    case "top":
                        e = function(c) {
                            c = c || 10;
                            b.el.scrollTop(b.el.scrollTop() - c);
                            b.isParent && (a.x = l.pageX, a.setBounderies(), a.updateDropArea(), t = !0)
                        };
                        break;
                    case "left":
                        e = function(c) {
                            c = c || 10;
                            b.el.scrollLeft(b.el.scrollLeft() - c);
                            b.isParent && (a.y =
                                l.pageY, a.setBounderies(), a.updateDropArea(), w = !0)
                        };
                        break;
                    case "right":
                        e = function(c) {
                            c = c || 10;
                            b.el.scrollLeft(b.el.scrollLeft() + c);
                            b.isParent && (a.y = l.pageY, a.setBounderies(), a.updateDropArea(), D = !0)
                        }
                }
                e(3);
                b.isParent || (b.interval[c] = setInterval(e, 50))
            },
            x = function(b, c) {
                if (c) b.interval[c] && (clearInterval(b.interval[c]), b.interval[c] = !1);
                else
                    for (var e in a.scrollables) {
                        var f = a.scrollables[e].interval,
                            k;
                        for (k in f) f[k] && (clearInterval(f[k]), f[k] = !1)
                    }
            };
        this.appendTo = function(b, c) {
            c = c || a.el;
            b = b instanceof
            $ ? b : $(b);
            if (b.length) {
                var e = c.offset(),
                    f = b.offset(),
                    e = {
                        top: e.top - f.top - parseInt(b.css("border-top-width")) + b.scrollTop(),
                        left: e.left - f.left - parseInt(b.css("border-left-width")) + b.scrollLeft()
                    };
                "static" === b.css("position") && b.css("position", "relative");
                c.appendTo(b).css(e)
            }
        };
        var A = function() {
            a.el.on("clayfy-dragstart", a.updateDragElement);
            a.el.on("clayfy-dragstart", a.updateDropArea);
            a.el.on("clayfy-drag", B);
            a.el.on("clayfy-drop", y);
            a.settings.ghost && (a.el.on("clayfy-dropinside", f), a.el.on("clayfy-dropoutside",
                f));
            a.el.on("clayfy-dragstart", function() {
                E() || (a.el.removeClass("clayfy-dropinside"), a.draggableBox.removeClass("clayfy-dropinside"))
            });
            a.el.on("clayfy-dragenter", function(b) {
                a.el.addClass("clayfy-dragenter");
                a.draggableBox.addClass("clayfy-dragenter");
                b.droparea.addClass("clayfy-dragenter");
                a.el[0].id && b.droparea.addClass("clayfy-dragenter-" + a.el[0].id)
            });
            a.el.on("clayfy-dragleave", function(b) {
                a.el.removeClass("clayfy-dropinside");
                a.draggableBox.removeClass("clayfy-dropinside");
                b.droparea.removeClass("clayfy-dropinside");
                a.el[0].id && b.droparea.removeClass("clayfy-dropinside-" + a.el[0].id)
            });
            a.el.on("clayfy-dragleave clayfy-drop", function(b) {
                a.el.removeClass("clayfy-dragenter");
                a.draggableBox.removeClass("clayfy-dragenter");
                $(".clayfy-dragenter").removeClass("clayfy-dragenter");
                a.el[0].id && $(".clayfy-dragenter-" + a.el[0].id).removeClass("clayfy-dragenter-" + a.el[0].id)
            });
            a.el.on("clayfy-dropinside", function(b) {
                a.el.addClass("clayfy-dropinside");
                a.draggableBox.addClass("clayfy-dropinside");
                b.droparea.addClass("clayfy-dropinside");
                a.el[0].id && b.droparea.addClass("clayfy-dropinside-" + a.el[0].id);
                a.settings.migrate && a.appendTo(b.droparea)
            })
        };
        this.updateDropArea = function(b) {
            a.droppable.dropArea = [];
            b = a.settings.droppable instanceof $ ? a.settings.droppable : $(a.settings.droppable);
            a.addDroppable(b)
        };
        this.updateDragElement = function() {
            a.droppable.dragElement = [];
            a.droppable.dragElement = {
                originalPos: a.getPosition(),
                id: a.el[0].id,
                originalDropArea: null,
                width: a.draggableBox.width(),
                height: a.draggableBox.height(),
                x: 0,
                y: 0
            };
            var b = a.droppable.dragElement;
            b.setCenter = function() {
                var c = a.draggableBox.offset();
                b.x = c.left + b.width / 2;
                b.y = c.top + b.height / 2
            };
            b.setCenter();
            b.originalDropArea = E()
        };
        this.resetDroppable = function(b) {
            b && (a.settings.droppable = b);
            a.updateDragElement();
            a.updateDropArea()
        };
        this.addDroppable = function(b) {
            (b instanceof $ ? b : $(b)).each(function() {
                var b = $(this),
                    c = b.offset(),
                    l = b.outerHeight(),
                    e = b.outerWidth(),
                    f = parseInt(b.css("border-top-width")),
                    k = parseInt(b.css("border-left-width")),
                    d = $.clayfy.getInner(b);
                a.droppable.dropArea.push({
                    el: b,
                    id: this.id,
                    left: c.left,
                    top: c.top,
                    width: e,
                    height: l,
                    innerWidth: d.innerWidth,
                    innerHeight: d.innerHeight,
                    offset: {
                        innerTop: c.top + f,
                        innerLeft: c.left + k,
                        innerBottom: d.innerHeight + c.top + f,
                        innerRight: d.innerWidth + c.left + k
                    },
                    right: c.left + e,
                    bottom: c.top + l,
                    active: !1,
                    triggered: !1
                })
            })
        };
        var B = function(b) {
                b = a.droppable.dragElement;
                b.setCenter();
                for (var c = 0, e = a.droppable.dropArea.length; c < e; c++) {
                    var f = a.droppable.dropArea[c];
                    f && (f.active = b.x > f.left && b.x < f.right && b.y > f.top && b.y < f.bottom ? !0 : !1, !f.triggered && f.active ? (f.triggered = !0, a.el.trigger($.Event("clayfy-dragenter", {
                        target: f.el[0],
                        droparea: f.el
                    }))) : f.triggered && !f.active && (f.triggered = !1, a.el.trigger($.Event("clayfy-dragleave", {
                        target: f.el[0],
                        droparea: f.el,
                        area: f
                    }))))
                }
            },
            E = function() {
                var b = a.droppable.dragElement;
                b.setCenter();
                for (var c = !1, e = 0, f = a.droppable.dropArea.length; e < f; e++) {
                    var k = a.droppable.dropArea[e];
                    k && b.x > k.left && b.x < k.right && b.y > k.top && b.y < k.bottom && (k.active = !0, k.triggered = !0, c = k)
                }
                return c
            },
            y = function() {
                for (var b, c = 0, e = a.droppable.dropArea.length; c < e; c++) a.droppable.dropArea[c].active &&
                    (b = a.droppable.dropArea[c]);
                if ("canceling" === a.status)
                    if (b && (b.active = !1, b.triggered = !1, a.el.trigger($.Event("clayfy-dragleave", {
                            target: b.el[0],
                            droparea: b.el
                        }))), b = a.droppable.dragElement.originalDropArea) b.active = !0, b.triggered = !0;
                    else return;
                if (b) {
                    if (a.el.trigger($.Event("clayfy-dropinside", {
                            target: b.el[0],
                            droparea: b.el,
                            area: b
                        })), a.settings.fit) {
                        var c = b,
                            e = a.contentGhost ? a.contentGhost : a.draggableBox,
                            f = {},
                            k = a.el.offset(),
                            d = k.top,
                            g = k.left,
                            h = a.droppable.dragElement.width + k.left,
                            k = a.droppable.dragElement.height +
                            k.top;
                        e.outerWidth() < c.innerWidth && (h > c.offset.innerRight && (f.left = parseInt(e.css("left")) + c.offset.innerRight - h), g < c.offset.innerLeft && (f.left = parseInt(e.css("left")) + c.offset.innerLeft - g));
                        e.outerHeight() < c.innerHeight && (k > c.offset.innerBottom && (f.top = parseInt(e.css("top")) + c.offset.innerBottom - k), d < c.offset.innerTop && (f.top = parseInt(a.el.css("top")) + c.offset.innerTop - d));
                        a.el.css(f)
                    }
                } else a.el.trigger("clayfy-dropoutside"), a.settings.dropoutside || ((c = a.droppable.dragElement.originalDropArea) &&
                    a.el.trigger($.Event("clayfy-dropinside", {
                        target: c.el[0],
                        droparea: c.el
                    })), a.settings.overflow && !a.settings.ghost ? a.el.css({
                        left: a.initPos.x - a.initPos.parent.offset().left - parseInt(a.initPos.parent.css("border-left-width")) + a.initPos.scrollLeft,
                        top: a.initPos.y - a.initPos.parent.offset().top - parseInt(a.initPos.parent.css("border-top-width")) + a.initPos.scrollTop
                    }) : a.el.css({
                        left: a.initPos.x,
                        top: a.initPos.y
                    })), a.settings.dropoutside && a.settings.migrate && a.settings.overflow && a.appendTo(a.tempContainer);
                b && (a.droppedTarget = b.el[0])
            },
            G = function(c) {
                if (!(n.is(c.target) || a.el.has(c.target).length && !a.settings.propagate || "undefined" !== typeof c.which && 1 !== c.which)) {
                    c.preventDefault();
                    var e = c.pageX - a.el.offset().left,
                        f = c.pageY - a.el.offset().top,
                        d = $("<div>", {
                            style: "position:absolute;left:0;top:0;width:100%;height:100%"
                        });
                    a.el.append(d);
                    var g = d.width(),
                        m = d.height();
                    d.remove();
                    e > g || f > m || (a.settings.coverScreen && $("body").append(h), b = !0, document.body.style.cursor = k, a.settings.dragstart.call(a, c), a.el.trigger("clayfy-dragstart"),
                        $(document).on("mousemove touchmove", F).on("mouseup touchend", z))
                }
            },
            z = function(e) {
                b && (e.preventDefault(), b = !1, c = !0, document.body.style.cursor = "", a.settings.overflow && (a.appendTo(a.initPos.parent, a.draggableBox), a.appendTo(a.initPos.parent)), a.settings.coverScreen && h.detach(), a.settings.drop.call(a), e = $.Event("clayfy-drop", {
                    pageX: e.pageX,
                    pageY: e.pageY,
                    screenX: e.screenX,
                    screenY: e.screenY
                }), a.el.trigger(e), $(document).off("mousemove touchmove", F).off("mouseup touchend", z))
            },
            F = function(e) {
                if (b) {
                    e.preventDefault();
                    e.originalEvent.touches && 1 == e.originalEvent.touches.length && (e = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]);
                    if (c) {
                        c = !1;
                        var f = a.el.parent();
                        a.initPos.parent = f;
                        a.settings.overflow && a.appendTo(a.tempContainer, a.draggableBox);
                        if (a.settings.ghost) {
                            var k = e,
                                d = a.getPosition(a.el),
                                g = a.settings.overflow ? a.tempContainer : a.el.parent(),
                                h = a.el.offset(),
                                n = a.initPos.parent ? a.initPos.parent.scrollTop() : 0,
                                m = a.initPos.parent ? a.initPos.parent.scrollLeft() : 0,
                                t = {
                                    width: a.el.width(),
                                    height: a.el.height(),
                                    top: d.y,
                                    left: d.x
                                };
                            !0 !== a.settings.ghost && (t = {
                                top: k.pageY - h.top + d.y + 5 - n,
                                left: k.pageX - h.left + d.x + 5 - m,
                                width: "auto",
                                height: "auto"
                            });
                            a.settings.overflow && (t.top = h.top - n, t.left = h.left - m, !0 !== a.settings.ghost && (t.top = k.pageY - n + 5, t.left = k.pageX - m + 5));
                            a.draggableBox.css(t);
                            a.draggableBox.appendTo(g);
                            if (a.contentGhost) {
                                a.contentGhost.html("");
                                var w;
                                switch (typeof a.settings.ghost) {
                                    case "string":
                                        w = a.settings.ghost;
                                        break;
                                    case "function":
                                        w = a.settings.ghost()
                                }
                                a.contentGhost.append(w);
                                a.container.offset && (m = a.container.offset.innerBottom,
                                    g = a.container.offset.innerRight, n = a.draggableBox.offset(), m = n.top + a.contentGhost.outerHeight() - m, g = n.left + a.contentGhost.outerWidth() - g, 0 < m && a.draggableBox.css({
                                        top: k.pageY - h.top + d.y + 5 - m
                                    }), 0 < g && a.draggableBox.css({
                                        left: k.pageX - h.left + d.x + 5 - g
                                    }))
                            }
                        }
                        a.x = e.pageX;
                        a.y = e.pageY;
                        a.setBounderies();
                        k = a.getPosition(a.el);
                        a.initPos = {
                            x: k.x,
                            y: k.y,
                            scrollLeft: f.scrollLeft(),
                            scrollTop: f.scrollTop(),
                            parent: f
                        };
                        a.history = {
                            dX: [0, 0, 0],
                            dY: [0, 0, 0],
                            diffDX: 0,
                            diffDY: 0
                        }
                    }
                    a.dX = e.pageX - a.x;
                    a.dY = e.pageY - a.y;
                    $.clayfy.dX = a.dX;
                    $.clayfy.dY =
                        a.dY;
                    a.history.diffDX = (a.history.dX[0] + a.history.dX[1] - (a.history.dX[2] + a.dX)) / 2;
                    a.history.diffDY = (a.history.dY[0] + a.history.dY[1] - (a.history.dY[2] + a.dY)) / 2;
                    a.history.dX = [a.history.dX[1], a.history.dX[2], a.dX];
                    a.history.dY = [a.history.dY[1], a.history.dY[2], a.dY];
                    a.fixDeltasWithBounderies();
                    (a.settings.move || a.settings.ghost) && a.move();
                    a.settings.drag.call(a, e);
                    e = $.Event("clayfy-drag", {
                        shiftKey: e.shiftKey,
                        pageX: e.pageX,
                        pageY: e.pageY,
                        clientX: e.clientX,
                        clientY: e.clientY,
                        screenX: e.screenX,
                        screenY: e.screenY,
                        altKey: e.altKey
                    });
                    a.el.trigger(e)
                }
            };
        this.getContainerBounderies = function() {
            if (!a.container.type) return !1;
            var b = a.draggableBox.offset(),
                c, e;
            a.container.update();
            c = a.contentGhost ? a.contentGhost.outerWidth() : a.draggableBox.outerWidth();
            e = a.contentGhost ? a.contentGhost.outerHeight() : a.draggableBox.outerHeight();
            b = {
                top: b.top - a.container.offset.innerTop,
                right: a.container.offset.innerRight - b.left - c,
                bottom: a.container.offset.innerBottom - b.top - e,
                left: b.left - a.container.offset.innerLeft
            };
            isNaN(b.top) && (b = {
                top: 1E13,
                right: 1E13,
                bottom: 1E13,
                left: 1E13
            });
            return b
        };
        this.setBounderies = function() {
            var b = a.settings.bounderies;
            a.actualPos = a.getPosition();
            a.bounderies = {
                top: -b[0],
                right: b[1],
                bottom: b[2],
                left: -b[3]
            };
            if (b = a.getContainerBounderies()) a.bounderies = {
                top: Math.max(-b.top, a.bounderies.top),
                right: Math.min(b.right, a.bounderies.right),
                bottom: Math.min(b.bottom, a.bounderies.bottom),
                left: Math.max(-b.left, a.bounderies.left)
            }
        };
        this.move = function() {
            a.draggableBox.css({
                top: a.actualPos.y + $.clayfy.dY,
                left: a.actualPos.x + $.clayfy.dX
            })
        };
        this.getPosition = function(b) {
            var c = a.el.offsetParent();
            b = ("undefined" === typeof b ? a.draggableBox || a.el : b).position();
            return {
                y: b.top + c.scrollTop(),
                x: b.left + c.scrollLeft()
            }
        };
        this.fixDeltasWithBounderies = function() {
            $.clayfy.dX > a.bounderies.right && ($.clayfy.dX = a.bounderies.right);
            $.clayfy.dX < a.bounderies.left && ($.clayfy.dX = a.bounderies.left);
            $.clayfy.dY < a.bounderies.top && ($.clayfy.dY = a.bounderies.top);
            $.clayfy.dY > a.bounderies.bottom && ($.clayfy.dY = a.bounderies.bottom);
            a.settings.moveX || ($.clayfy.dX = 0);
            a.settings.moveY || ($.clayfy.dY = 0)
        };
        this.isTouchable = function() {
            return "ontouchstart" in window || 0 < navigator.maxTouchPoints || 0 < navigator.msMaxTouchPoints
        };
        this.destroy = function() {};
        (function() {
            a.originalPos = a.getPosition();
            a.actualPos = a.originalPos;
            e();
            a.settings.ghost ? (!0 === a.settings.ghost ? (a.draggableBox = a.el.clone(), a.draggableBox.addClass("clayfy-ghost-opacity")) : (a.draggableBox = $("<div>", {
                    margin: a.el.css("margin")
                }), a.contentGhost = $('<div class="clayfy-ghost-content" style="position:absolute"></div>'),
                a.draggableBox.append(a.contentGhost)), a.draggableBox.css({
                position: "absolute",
                width: "100%",
                height: "100%"
            }).addClass("clayfy-ghost")) : a.draggableBox = a.el;
            a.el.addClass("clayfy-box");
            a.settings.move || a.el.addClass("clayfy-not-move");
            k = a.el.css("cursor");
            n = $(a.settings.not);
            a.settings.overflow && $("body").append(a.tempContainer);
            a.el.on("mousedown touchstart", G);
            $("body").on("mouseup touchend", z);
            a.settings.escape && (a.el.on("clayfy-dragstart", function(a) {
                    a.stopPropagation();
                    $(window).on("keydown", m)
                }),
                a.el.on("clayfy-drop", function() {
                    $(window).off("keydown", m)
                }));
            !1 === a.settings.scrollable || "node" !== a.container.type || a.settings.container instanceof v || ("string" === typeof a.settings.scrollable ? a.settings.scrollable = a.settings.scrollable ? a.settings.scrollable + " , " + a.settings.container : a.settings.container : a.settings.scrollable instanceof $ && (a.settings.scrollable = a.settings.scrollable.add(a.settings.container)));
            a.el.on("clayfy-dragstart", u);
            a.el.on("clayfy-drag", r);
            a.el.on("clayfy-drop", x);
            if (0 !=
                a.settings.droppable) a.updateDragElement(), a.updateDropArea(), A();
            else if (a.settings.ghost) a.el.on("clayfy-drop", f)
        })()
    }

    function v(d, g) {
        this.draggableEl = d instanceof $ ? d : $(d);
        this.values;
        this.el;
        this.type;
        this.originalDraggable;
        this.innerWidth = this.innerHeight = this.height = this.width = 0;
        this.offset = {
            top: 0,
            left: 0,
            innerBottom: 0,
            innerRight: 0,
            innerLeft: 0,
            innerTop: 0
        };
        var a = this,
            b = function() {
                var b, c;
                b = a.el;
                b = b instanceof $ ? b : $(b);
                var d, f, e;
                b.length ? (c = b[0].style.position, "static" === b.css("position") && b.css({
                        position: "relative"
                    }),
                    f = $("<div>", {
                        style: "position:absolute;top:0;left:0;bottom:0;right:0"
                    }), d = $("<div>", {
                        style: "position:absolute;top:0;left:0;width:100%;height:100%"
                    }), f.append(d), b.append(f), e = d.width(), d = d.height(), f.remove(), b[0].style.position = c, b = e, c = d) : c = b = void 0;
                a.width = a.el.width();
                a.height = a.el.height();
                a.innerWidth = b;
                a.innerHeight = c;
                a.offset = a.el.offset();
                a.offset.innerTop = a.offset.top + parseInt(a.el.css("border-top-width"));
                a.offset.innerLeft = a.offset.left + parseInt(a.el.css("border-left-width"));
                a.offset.innerBottom =
                    a.offset.innerTop + a.innerHeight;
                a.offset.innerRight = a.offset.innerLeft + a.innerWidth
            },
            c = function() {
                var b = a.getDraggableValues();
                a.offset = {
                    top: b.offset.top - (b.position.top - a.originalDraggable.position.top) - a.values[0],
                    left: b.offset.left - (b.position.left - a.originalDraggable.position.left) - a.values[3]
                };
                a.width = a.originalDraggable.outerWidth + a.values[3] + a.values[1];
                a.height = a.originalDraggable.outerHeight + a.values[0] + a.values[2];
                a.innerWidth = a.width;
                a.innerHeight = a.height;
                a.offset.innerTop = a.offset.top;
                a.offset.innerLeft = a.offset.left;
                a.offset.innerBottom = a.offset.top + a.height;
                a.offset.innerRight = a.offset.left + a.width
            };
        this.getDraggableValues = function() {
            var b = a.draggableEl.offset(),
                c = a.draggableEl.offsetParent();
            return {
                position: {
                    top: a.draggableEl.position().top + c.scrollTop(),
                    left: a.draggableEl.position().left + c.scrollLeft()
                },
                offset: b,
                outerWidth: a.draggableEl.outerWidth(),
                outerHeight: a.draggableEl.outerHeight()
            }
        };
        "string" === typeof g || g instanceof $ ? (a.el = g instanceof $ ? g : $(g), a.type = "node", "static" ===
            a.el.css("position") && a.el.css("position", "relative"), a.update = b) : (a.values = g, a.type = "object", a.update = c, a.originalDraggable = a.getDraggableValues());
        a.update()
    }

    function A(d, g) {
        this.el = d instanceof $ ? d : $(d);
        this.originalSize = {};
        this.initSize = {};
        this.handlers = [];
        this.actualSize;
        this.newSize;
        this.draggable;
        this.shift = this.preserveAspectRatio = !1;
        this.status = "ready";
        this.touchableDevice;
        var a = $.extend(!0, {}, $.clayfy.settings, {
            callbacks: {
                resizestart: function() {},
                resize: function() {},
                resizeend: function() {}
            }
        });
        this.settings = $.extend(!0, {}, a, g);
        var b = this,
            c, k = !1,
            n = function(a) {
                27 === a.keyCode && b.cancel()
            },
            h = function() {
                var a = "top left;top right;bottom left;bottom right;left;right;top;bottom".split(";");
                "static" === b.el.css("position") && b.el.css("position", "relative");
                b.cssPosition = b.el.css("position");
                var c = {
                        container: b.settings.container,
                        not: ".clayfy-handler",
                        escape: !1,
                        droppable: b.settings.droppable
                    },
                    c = $.extend(!0, {}, b.settings, c);
                b.settings.move && "relative" !== b.cssPosition || (c.move = !1);
                b.draggable = new r(b.el,
                    c);
                for (c = 0; c < a.length; c++) {
                    var d = a[c].split(" "),
                        k = !0,
                        g;
                    for (g in d) b.settings.hasOwnProperty(d[g]) && b.settings[d[g]] || (k = !1);
                    k && b.handlers.push(new B(a[c], b))
                }
                b.touchableDevice && b.el.addClass("clayfy-touch-device")
            };
        this.getSize = function() {
            b.parent = b.el.offsetParent();
            var a = b.parent,
                c = b.el.position();
            return {
                width: b.el.width(),
                height: b.el.height(),
                left: c.left + a.scrollLeft(),
                top: c.top + a.scrollTop(),
                outerWidth: b.el.outerWidth(),
                outerHeight: b.el.outerHeight()
            }
        };
        this.getNewSize = function() {
            var a = b.el.outerHeight(),
                c = b.el.outerWidth(),
                d = b.el.position(),
                k = d.left + b.parent.scrollLeft(),
                d = d.top + b.parent.scrollTop();
            return {
                outerWidth: c,
                outerHeight: a,
                top: d,
                left: k,
                right: k + c,
                bottom: d + a,
                width: b.el.width(),
                height: b.el.height()
            }
        };
        this.resize = {
            left: function() {
                b.el.width(b.actualSize.width - $.clayfy.dX);
                "relative" !== b.cssPosition && b.el.css({
                    left: b.actualSize.left + $.clayfy.dX
                })
            },
            top: function() {
                b.el.height(b.actualSize.height - $.clayfy.dY);
                "relative" !== b.cssPosition && b.el.css({
                    top: b.actualSize.top + $.clayfy.dY
                })
            },
            bottom: function() {
                b.el.height(b.actualSize.height +
                    $.clayfy.dY)
            },
            right: function() {
                b.el.width(b.actualSize.width + $.clayfy.dX)
            }
        };
        this.hideHandlers = function() {
            "ready" === b.status && ($.each(b.handlers, function(a, b) {
                b.el.css("display", "none")
            }), k = !1)
        };
        this.showHandlers = function() {
            k || "ready" !== b.status || ($.each(b.handlers, function(a, b) {
                b.el.css("display", "block")
            }), k = !0, b.updateHandlersPosition())
        };
        this.updateHandlersPosition = function() {
            b.newSize = b.getNewSize();
            $.each(b.handlers, function(a, b) {
                b.updatePosition()
            })
        };
        this.cancel = function() {
            console.log("cancelled");
            b.status = "ready";
            b.hideHandlers();
            b.status = "canceling";
            $("body").trigger("mouseup");
            b.el.animate("relative" !== b.cssPosition ? b.initSize : {
                width: b.initSize.width,
                height: b.initSize.height
            }, 100, function() {
                b.status = "ready";
                b.el.is(":hover") && b.showHandlers();
                b.el.trigger("clayfy-cancel")
            })
        };
        this.isTouchable = function() {
            return "ontouchstart" in window || 0 < navigator.maxTouchPoints || 0 < navigator.msMaxTouchPoints
        };
        (function() {
            b.touchableDevice = b.isTouchable();
            b.originalSize = b.getSize();
            b.actualSize = b.originalSize;
            b.newSize = b.getNewSize();
            h();
            b.preserveAspectRatio = b.settings.preserveAspectRatio;
            b.el.on("clayfy-resizestart", function(a) {
                b.initSize = b.getNewSize();
                $(window).on("keydown", n);
                b.status = "resizing"
            });
            b.el.on("clayfy-resizeend", function() {
                $(window).off("keydown", n);
                b.status = "ready"
            });
            b.el.on("clayfy-dragstart", function(a) {
                a.stopPropagation();
                b.initSize = b.getSize();
                b.status = "dragging"
            });
            b.el.on("clayfy-drop", function(a) {
                a.stopPropagation();
                b.status = "ready"
            });
            b.el.on("clayfy-resize clayfy-drag", b.updateHandlersPosition);
            $(window).on("resize", b.updateHandlersPosition);
            b.el.on("clayfy-dragstart", function(a) {
                a.stopPropagation();
                $(window).on("keydown", n)
            });
            b.el.on("clayfy-drop", function(a) {
                a.stopPropagation();
                $(window).off("keydown", n)
            });
            var a = b.el;
            $.each(b.handlers, function(c, d) {
                b.hideHandlers();
                a = a.add(d.el)
            });
            a.on("mouseover", function() {
                c && clearTimeout(c);
                b.showHandlers()
            });
            a.on("mouseout", function() {
                c = setTimeout(b.hideHandlers, 20)
            });
            b.el.on("clayfy-resizeend clayfy-drop", function(a) {
                a.stopPropagation();
                b.el.parent().find(":hover").length ||
                    b.touchableDevice || (k = !1, b.el.trigger("mouseout"))
            });
            b.touchableDevice && (a.on("touchstart", function() {
                c && clearTimeout(c);
                b.showHandlers();
                c = setTimeout(b.hideHandlers, 4E3)
            }), b.el.on("clayfy-resizeend clayfy-drop", function() {
                b.el.trigger("click")
            }))
        })()
    }

    function B(d, g) {
        this.el = $("<div>", {
            "class": "clayfy-handler clayfy-" + d,
            style: "position: absolute;"
        });
        this.resizable = g;
        this.position = d;
        this.draggable;
        var a = this,
            b = !1;
        this.updatePosition = function() {
            var b = g.newSize;
            switch (a.position) {
                case "left":
                    a.el.css({
                        width: 5,
                        left: b.left,
                        top: b.top,
                        height: b.outerHeight
                    });
                    break;
                case "right":
                    a.el.css({
                        width: 5,
                        left: b.right - 5,
                        top: b.top,
                        height: b.outerHeight
                    });
                    break;
                case "top":
                    a.el.css({
                        height: 5,
                        left: b.left,
                        top: b.top,
                        width: b.outerWidth
                    });
                    break;
                case "bottom":
                    a.el.css({
                        height: 5,
                        left: b.left,
                        top: b.bottom - 5,
                        width: b.outerWidth
                    });
                    break;
                case "top left":
                    a.el.css({
                        width: 8,
                        height: 8,
                        left: b.left,
                        top: b.top
                    });
                    break;
                case "top right":
                    a.el.css({
                        width: 8,
                        height: 8,
                        left: b.right - 8,
                        top: b.top
                    });
                    break;
                case "bottom left":
                    a.el.css({
                        width: 8,
                        height: 8,
                        left: b.left,
                        top: b.bottom - 8
                    });
                    break;
                case "bottom right":
                    a.el.css({
                        width: 8,
                        height: 8,
                        left: b.right - 8,
                        top: b.bottom - 8
                    })
            }
        };
        this.setBounderies = function(b) {
            b = b || [1E5, 1E5, 1E5, 1E5];
            var d = [],
                g, h, f, e;
            a.resizable.actualSize = a.resizable.getSize();
            g = a.resizable.actualSize;
            h = a.resizable.settings;
            f = a.resizable.originalSize.width / a.resizable.originalSize.height;
            (e = a.draggable.getContainerBounderies()) || (e = {
                top: 1E13,
                right: 1E13,
                bottom: 1E13,
                left: 1E13
            });
            for (var m = 0, r = h.maxSize.length; m < r; m++) null === h.maxSize[m] && (h.maxSize[m] = 1E13);
            $.clayfy.getInner(a.draggable.el);
            if ("left" === a.position || "top" === a.position || "top left" === a.position) b[1] = g.outerWidth - h.minSize[0], b[3] = h.maxSize[0] - g.outerWidth, b[2] = g.outerHeight - h.minSize[1], b[0] = h.maxSize[1] - g.outerHeight, a.draggable.settings.bounderies = b, d[3] = Math.min(e.left, b[3], e.top * f, b[0] * f), d[0] = Math.min(e.top, b[0], e.left / f, b[3] / f), d[1] = Math.min(e.right, b[1], e.bottom * f + b[2], b[2] * f), d[2] = Math.min(e.bottom, b[2], e.right / f + b[1], b[1] / f);
            if ("right" === a.position || "bottom" === a.position || "bottom right" ===
                a.position) b[3] = g.outerWidth - h.minSize[0], b[1] = h.maxSize[0] - g.outerWidth, b[0] = g.outerHeight - h.minSize[1], b[2] = h.maxSize[1] - g.outerHeight, a.draggable.settings.bounderies = b, d[1] = Math.min(e.right, b[1], e.bottom * f, b[2] * f), d[2] = Math.min(e.bottom, b[2], e.right / f, b[1] / f), d[3] = Math.min(e.left, b[3], e.top * f + b[0], b[0] * f), d[0] = Math.min(e.top, b[0], e.left / f + b[3], b[3] / f);
            "bottom left" === a.position && (b[0] = g.outerHeight - h.minSize[1], b[1] = g.outerWidth - h.minSize[0], b[2] = h.maxSize[1] - g.outerHeight, b[3] = h.maxSize[0] - g.outerWidth,
                a.draggable.settings.bounderies = b, d[3] = parseInt(Math.min(e.left, b[3], e.bottom * f, b[2] * f)), d[2] = parseInt(Math.min(e.bottom, b[2], e.left / f, b[3] / f)), d[0] = parseInt(Math.min(e.top, b[0], e.right / f + b[1], b[1] / f)), d[1] = parseInt(Math.min(e.right, b[1], e.top * f + b[0], b[0] * f)));
            "top right" === a.position && (b[0] = h.maxSize[1] - g.outerHeight, b[1] = h.maxSize[0] - g.outerWidth, b[2] = g.outerHeight - h.minSize[1], b[3] = g.outerWidth - h.minSize[0], a.draggable.settings.bounderies = b, d[0] = parseInt(Math.min(e.top, b[0], e.right / f, b[1] / f)),
                d[1] = parseInt(Math.min(e.right, b[1], e.top * f, b[0] * f)), d[3] = parseInt(Math.min(e.left, b[3], e.bottom * f + b[2], b[2] * f)), d[2] = parseInt(Math.min(e.bottom, b[2], e.left / f + b[3], b[3] / f)));
            a.originalBounderies = {
                top: -b[0],
                right: b[1],
                bottom: b[2],
                left: -b[3]
            };
            a.aspectRatioBounderies = {
                top: -d[0],
                right: d[1],
                bottom: d[2],
                left: -d[3]
            };
            a.draggable.bounderies = a.resizable.preserveAspectRatio ? a.aspectRatioBounderies : a.originalBounderies
        };
        this.fixDeltas = function() {
            var b = $.clayfy;
            if (a.resizable.preserveAspectRatio) var d = a.resizable.originalSize.width /
                a.resizable.originalSize.height;
            !a.resizable.preserveAspectRatio && a.resizable.shiftKey && (d = a.resizable.actualSize.width / a.resizable.actualSize.height);
            if (a.resizable.preserveAspectRatio || a.resizable.shiftKey) "right" === a.position && (b.dY = b.dX / d), "bottom" === a.position && (b.dX = b.dY * d), "left" === a.position && (b.dY = b.dX / d), "top" === a.position && (b.dX = b.dY * d), "top left" === a.position && (b.dY = b.dX / d), "top right" === a.position && (b.dY = -b.dX / d), "bottom left" === a.position && (b.dY = -b.dX / d), "bottom right" === a.position &&
                (b.dY = b.dX / d)
        };
        (function() {
            g.settings.className && a.el.addClass(g.settings.className);
            a.updatePosition();
            a.resizable.el.after(a.el);
            a.draggable = new r(a.el, {
                move: !1,
                container: g.draggable.container,
                scroll: !1,
                escape: !1
            });
            a.draggable.el.on("clayfy-drop", function(a) {
                g.el.trigger("clayfy-resizeend");
                g.settings.callbacks.resizeend()
            });
            a.draggable.el.on("clayfy-dragstart", function(c) {
                c.stopPropagation();
                a.resizable.preserveAspectRatio || (a.resizable.originalSize = a.resizable.getSize());
                g.el.trigger("clayfy-beforeresize");
                a.setBounderies();
                g.el.trigger("clayfy-resizestart");
                g.settings.callbacks.resizestart();
                b = !1
            });
            a.draggable.el.on("clayfy-drag", function(c) {
                c.shiftKey && !g.preserveAspectRatio && (g.shiftKey = !0);
                c.shiftKey || (g.shiftKey = !1);
                !b || c.shiftKey || g.preserveAspectRatio || (console.log("Desactivate: preserve aspect ratio"), a.draggable.bounderies = a.originalBounderies, b = !1);
                b || !c.shiftKey || g.preserveAspectRatio || (console.log("Activate: preserve aspect ratio"), a.draggable.bounderies = a.aspectRatioBounderies, b = !0);
                g.preserveAspectRatio &&
                    !g.shiftKey && (a.draggable.bounderies = a.aspectRatioBounderies)
            });
            if (-1 < d.indexOf("left")) a.draggable.el.on("clayfy-drag", function(b) {
                if (g.preserveAspectRatio || g.shiftKey) a.fixDeltas(), "left" === d && g.resize.top();
                g.resize.left()
            });
            if (-1 < d.indexOf("top")) a.draggable.el.on("clayfy-drag", function(b) {
                if (g.preserveAspectRatio || g.shiftKey) a.fixDeltas(), "top" === d && g.resize.left();
                g.resize.top()
            });
            if (-1 < d.indexOf("right")) a.draggable.el.on("clayfy-drag", function(b) {
                if (g.preserveAspectRatio || g.shiftKey) a.fixDeltas(),
                    "right" === d && g.resize.bottom();
                g.resize.right()
            });
            if (-1 < d.indexOf("bottom")) a.draggable.el.on("clayfy-drag", function(b) {
                if (g.preserveAspectRatio || g.shiftKey) a.fixDeltas(), "bottom" === d && g.resize.right();
                g.resize.bottom()
            });
            a.draggable.el.on("clayfy-drag", function(a) {
                g.el.trigger("clayfy-resize");
                g.settings.callbacks.resize()
            })
        })()
    }

    function y(d, g) {
        this.el = d instanceof $ ? d : $(d);
        this.draggableBox;
        this.dropArea = $("<div>", {
            "class": "clayfy-sort-droparea"
        });
        this.draggable;
        this.droppable;
        this.droppableParent;
        this.index;
        this.indexRelative;
        this.parent;
        this.settings = $.extend(!0, {}, $.clayfy.settings, g);
        var a = this,
            b, c = function(b) {
                27 === b.keyCode && a.cancel()
            },
            k = function() {
                a.draggableBox = a.el.clone();
                a.draggableBox.css({
                    position: "absolute",
                    width: "100%",
                    height: "100%"
                }).addClass("clayfy-sort-dragging");
                var b = a.el.parent();
                "static" === b.css("position") && b.css("position", "relative")
            },
            n = function() {
                a.dropArea.appendTo(a.el.parent());
                a.dropArea.css({
                    position: "absolute",
                    width: a.el.outerWidth(),
                    height: a.el.outerHeight(),
                    top: a.el.position().top + parseInt(a.el.css("margin-top")) - parseInt(a.dropArea.css("border-top-width")),
                    left: a.el.position().left + parseInt(a.el.css("margin-left")) - parseInt(a.dropArea.css("border-left-width"))
                })
            },
            h = function(b) {
                b = a.parent.find(a.droppable);
                if (a.parent.is($(a.droppedTarget).parent())) {
                    var c = b.index(a.el);
                    a.indexRelative < c ? b.eq(a.indexRelative).before(a.el) : b.eq(a.indexRelative).after(a.el)
                } else b.length ? b.eq(a.indexRelative).before(a.el) : a.parent.append(a.el);
                n()
            },
            f = function(c) {
                m();
                (!1 ===
                    a.el.triggerHandler("validateChange") || !a.parent.is($(a.droppedTarget).parent()) && !a.settings["export"] || b) && h();
                var d = a.dropArea.parent().offset(),
                    e = a.draggableBox.parent().offset();
                c = a.el.position().left + (d.left - e.left);
                d = a.el.position().top + (d.top - e.top);
                a.draggableBox.animate({
                    top: d,
                    left: c
                }, 200, function() {
                    a.dropArea.detach();
                    a.el[0].style.visibility = "";
                    a.draggableBox.detach();
                    m();
                    var b = a.droppable.index(a.el);
                    b != a.index && (a.index = b, a.el.trigger($.Event("clayfy-changeorder", {
                        index: a.index,
                        order: a.droppable
                    })));
                    a.el.parent().find(".clayfy-sort-helper").remove()
                });
                return b = !1
            },
            e = function(b) {
                if (!a.el.is(b.target)) {
                    m();
                    var c = a.droppable.index(b.target),
                        d = a.droppable.index(a.el);
                    a.droppedTarget = b.target;
                    c > d ? $(b.target).after(a.el) : $(b.target).before(a.el);
                    n();
                    a.draggable.updateDropArea();
                    2 > a.parent.find(a.droppable).length ? a.parent.find(".clayfy-sort-helper").length || a.parent.append('<div class="clayfy-sort-helper" style="position: absolute; width: 100%; height: 100%; top: 0; left:0"></div>') : a.parent.find(".clayfy-sort-helper").remove();
                    $(".clayfy-sort-helper").each(function() {
                        var b = $(this);
                        b.parent().is(a.droppableParent) && a.draggable.addDroppable(b)
                    })
                }
            },
            m = function() {
                a.droppable = a.settings.siblings ? a.settings.siblings instanceof $ ? a.settings.siblings : $(a.settings.siblings) : a.el.siblings().andSelf()
            },
            q = function() {
                a.droppableParent || (a.droppableParent = a.el.parent());
                a.droppable.each(function() {
                    a.droppableParent = a.droppableParent.add($(this).parent())
                })
            };
        this.cancel = function() {
            b = !0;
            $("body").trigger("mouseup")
        };
        (function() {
            m();
            q();
            k();
            a.el.on("mousedown touchstart", function(b) {
                if ("mousedown" !== b.type || 1 === b.which) m(), q(), a.index = a.droppable.index(a.el), a.parent = a.el.parent(), a.indexRelative = a.parent.find(a.droppable).index(a.el), a.draggableBox.css({
                    width: a.el.outerWidth(),
                    height: a.el.outerHeight(),
                    top: a.el.position().top,
                    left: a.el.position().left
                }), n(), a.draggableBox.appendTo(a.parent), a.el.css({
                    visibility: "hidden"
                }), a.draggableBox.trigger($.Event(b.type, b))
            });
            var b = $.extend(!0, {}, a.settings, {
                droppable: a.droppable,
                escape: !1,
                dropoutside: !0
            });
            a.draggable = new r(a.draggableBox, b);
            a.draggableBox.on("clayfy-drop", f);
            a.draggableBox.on("clayfy-dropoutside", function(a) {
                return !1
            });
            a.draggableBox.on("clayfy-dragenter", e);
            a.draggableBox.on("clayfy-dragstart", function() {
                a.draggable.resetDroppable(a.droppable);
                $(".clayfy-sort-helper").each(function() {
                    var b = $(this);
                    b.parent().is(a.droppableParent) && a.draggable.addDroppable(b)
                })
            });
            a.draggableBox.on("clayfy-dragstart", function(a) {
                a.stopPropagation();
                $(window).on("keydown", c)
            });
            a.draggableBox.on("clayfy-drop",
                function() {
                    $(window).off("keydown", c)
                })
        })()
    }
    $.clayfy = {
        dX: 0,
        dY: 0,
        container: function(d, g) {
            return new v(d, g)
        },
        settings: {
            type: "draggable",
            bounderies: [1E7, 1E7, 1E7, 1E7],
            container: "",
            moveX: !0,
            moveY: !0,
            move: !0,
            not: "",
            ghost: !1,
            coverScreen: !0,
            scrollable: "",
            droppable: "",
            fit: !0,
            dropoutside: !1,
            migrate: !1,
            overflow: !1,
            escape: !0,
            propagate: !0,
            preserveAspectRatio: !1,
            maxSize: [500, 200],
            minSize: [100, 50],
            left: !0,
            top: !0,
            right: !0,
            bottom: !0,
            className: "",
            siblings: "",
            "export": !0,
            dragstart: function(d) {},
            drag: function(d) {},
            drop: function(d) {}
        },
        getInner: function(d) {
            d = d instanceof $ ? d : $(d);
            var g, a, b, c;
            if (!d.length) return {
                width: 0,
                height: 0
            };
            g = d[0].style.position;
            "static" === d.css("position") && d.css({
                position: "relative"
            });
            b = $("<div>", {
                style: "position:absolute;top:0;left:0;bottom:0;right:0"
            });
            a = $("<div>", {
                style: "position:absolute;top:0;left:0;width:100%;height:100%"
            });
            b.append(a);
            d.append(b);
            c = a.width();
            a = a.height();
            b.remove();
            d[0].style.position = g;
            return {
                innerWidth: c,
                innerHeight: a
            }
        }
    };
    var q;
    $.fn.clayfy = function(d) {
        var g = arguments;
        if (void 0 ===
            d || "object" === typeof d) {
            var a = $.clayfy.settings.type;
            void 0 !== d && void 0 !== d.type && (a = d.type);
            switch (a) {
                case "draggable":
                    q = r;
                    break;
                case "resizable":
                    q = A;
                    break;
                case "sortable":
                    q = y
            }
            return this.each(function() {
                $.data(this, "clayfy") || $.data(this, "clayfy", new q(this, d))
            })
        }
        if ("string" === typeof d && "_" !== d[0] && "init" !== d) return "instance" === d ? this.length ? $.data(this[0], "clayfy") : null : 0 == Array.prototype.slice.call(g, 1).length && -1 != $.inArray(d, $.fn.clayfy.getters) ? (a = $.data(this[0], "clayfy"), a[d].apply(a, Array.prototype.slice.call(g,
            1))) : this.each(function() {
            var a = $.data(this, "clayfy");
            "function" === typeof a[d] && a[d].apply(a, Array.prototype.slice.call(g, 1))
        })
    };
    $.fn.clayfy.getters = ["getPosition"]
})(jQuery);
